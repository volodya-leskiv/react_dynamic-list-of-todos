{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","selectIdOfUser","selectedUserId","useState","todos","setTodos","title","setTitle","selectedValue","setSelectedValue","filteredTodos","filter","todo","toLowerCase","includes","useEffect","fetch","then","response","ok","Error","json","fetchedTodos","className","type","value","placeholder","onChange","event","target","prepareForFilterTodos","completed","map","classNames","readOnly","checked","userId","onClick","id","CurrentUser","user","setUser","getUsers","userFromServer","name","email","phone","App","setSelectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5f4aa07c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { getTodos } from '../../api';\n\ntype Props = {\n  selectIdOfUser: (userId: number) => void\n  selectedUserId: number\n};\n\n// eslint-disable-next-line max-len\nexport const TodoList: React.FC<Props> = ({\n  selectIdOfUser,\n  selectedUserId,\n}) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [title, setTitle] = useState('');\n  const [selectedValue, setSelectedValue] = useState('');\n  const filteredTodos = todos\n    .filter(todo => todo.title.toLowerCase().includes(title.toLowerCase()));\n\n  useEffect(() => {\n    getTodos()\n      .then(fetchedTodos => setTodos(fetchedTodos));\n  }, []);\n\n  function filter(prepareForFilterTodos: Todo[]): Todo[] {\n    switch (selectedValue) {\n      case 'completed':\n        return prepareForFilterTodos.filter(todo => todo.completed);\n      case 'active':\n        return prepareForFilterTodos.filter(todo => !todo.completed);\n      default:\n        return prepareForFilterTodos;\n    }\n  }\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"TodoList__list-container\">\n        <h4>Filter by title</h4>\n        <input\n          data-cy=\"filterByTitle\"\n          type=\"text\"\n          value={title}\n          className=\"TodoList__input\"\n          placeholder=\"Enter a title\"\n          onChange={(event) => {\n            setTitle(event.target.value);\n          }}\n\n        />\n        <h4> Status:</h4>\n        <select\n          className=\"TodoList__input TodoList__input \"\n          onChange={(event) => {\n            setSelectedValue(event.target.value);\n          }}\n        >\n          <option value=\"all\"> All </option>\n          <option value=\"active\">Active </option>\n          <option value=\"completed\">Completed </option>\n        </select>\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {filter(filteredTodos).map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                },\n              )}\n            >\n              <label>\n                <input type=\"checkbox\" readOnly checked={todo.completed} />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                data-cy=\"userButton\"\n                className={classNames(\n                  'TodoList__user-button button',\n                  {\n                    'TodoList__user-button--selected':\n                      todo.userId === selectedUserId,\n                  },\n                )}\n                type=\"button\"\n                onClick={() => {\n                  selectIdOfUser(todo.userId);\n                }}\n              >\n                {`User# ${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const apiUrlTodos = 'https://mate.academy/students-api/todos';\nconst apiUrlUsers = 'https://mate.academy/students-api/users';\n\nexport const getTodos = ():Promise<Todo[]> => {\n  return fetch(apiUrlTodos)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Todo error');\n      }\n\n      return response.json();\n    });\n};\n\nexport const getUsers = (selectedUserId: number):Promise<User> => {\n  return fetch(`${apiUrlUsers}/${selectedUserId}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('User error');\n      }\n\n      return response.json();\n    });\n};\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { getUsers } from '../../api';\n\ntype Props = {\n  selectedUserId:number\n  selectIdOfUser: (userId: number) => void\n};\n\n// eslint-disable-next-line max-len\nexport const CurrentUser: React.FC<Props> = ({ selectedUserId, selectIdOfUser }) => {\n  const [user, setUser] = useState<User | null>();\n\n  useEffect(() => {\n    getUsers(selectedUserId)\n      .then(userFromServer => setUser(userFromServer));\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {user\n        ? (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>{`Selected User: ${user.id}`}</span>\n            </h2>\n\n            <h3\n              className=\"CurrentUser__name\"\n              data-cy=\"userName\"\n            >\n              {user.name}\n            </h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n          </>\n        )\n        : (\n          'Please wait'\n        )}\n      <button\n        type=\"button\"\n        className=\"button is-danger\"\n        onClick={() => {\n          selectIdOfUser(0);\n        }}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  const selectIdOfUser = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        {/* eslint-disable-next-line max-len */}\n        <TodoList selectIdOfUser={selectIdOfUser} selectedUserId={selectedUserId} />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            // eslint-disable-next-line max-len\n            <CurrentUser selectedUserId={selectedUserId} selectIdOfUser={selectIdOfUser} />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}